# event management, assignment 2.
"""
Django settings for eventmanager project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from decouple import config  # decouople, dotenv, environ
import dj_database_url
from pathlib import Path
from dotenv import load_dotenv
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!

DEBUG = os.getenv('DEBUG', 'False') == 'True' #


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
	"core",
	"users",
	"debug_toolbar", # ---
	'cloudinary',
    'cloudinary_storage'
]

MIDDLEWARE = [
	"debug_toolbar.middleware.DebugToolbarMiddleware",  # ---
    'django.middleware.security.SecurityMiddleware',	
	'whitenoise.middleware.WhiteNoiseMiddleware',  # --- for render
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'eventmanager.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],  # add BASE_DIR/ 'templates' if global template used.
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'eventmanager.wsgi.application'


# initial Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

# local postgresql
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': 'eventdb2',  # --------- new created
#         'USER': 'postgres',
#         'PASSWORD': 'mppg',
#         'HOST': 'localhost', 
# 		'PORT': '5432',
#     }
# }

# for supabase, worked on previous. problem: did not upadate host and got error, new host: aws-0-us-east-1.pooler.supabase.com
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': 'postgres', # default in supabase ?
#         'USER': 'postgress.pgwqffehrtjkflmngduq', #f"postgres.{os.getenv('DB_PROJECT_ID')}", # project_id, from setting of project in supabase.
#         'PASSWORD': os.getenv('DB_PASSWORD'),  # project password
#         'HOST': 'aws-0-ap-southeast-1.pooler.supabase.com',  # Supabase host, used from Session pooler
#         'PORT': '5432',
#     }
# }


# worked
DATABASES = {
    'default': dj_database_url.config(default=os.getenv('DATABASE_URL'))  # DATABASE_URL from supabase Session pooler.
}

# DATABASES = {
#     'default': dj_database_url.config(
#         default=config('DATABASE_URL') # --------------------------
#     )
# }

# DATABASES = {
#     'default': dj_database_url.config(conn_max_age=600)
# }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / 'static']    
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # for production
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'  # for render

MEDIA_URL = '/media/'
# MEDIA_ROOT = BASE_DIR / 'media' # used cloudinary

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

INTERNAL_IPS = ["127.0.0.1",]  # The Debug Toolbar is shown only if your IP address is listed in Djangoâ€™s INTERNAL_IPS
 

# -----------------------------------------------------------------


ALLOWED_HOSTS = ['localhost', '127.0.0.1', 'https://dj-event-mgmt-assignment-2.onrender.com', '.onrender.com']


# python-dotenv package installed,  use os.getenv() to read values from .env, eg. 'HOST': os.getenv('DB_HOST', 'localhost'),

# for sending email
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_USE_TLS = True
EMAIL_PORT = 587
EMAIL_HOST_USER = config('EMAIL_HOST_USER')  # sender's email-id
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD') # password associated with above email-id/google app password (not the regular password)
DEFAULT_FROM_EMAIL = "event_mgmt_app"


# for user account email activation
#FRONTEND_URL = config('FRONTEND_URL', default='http://127.0.0.1:8000')  # development, -----------------------------------------------------
FRONTEND_URL = config('FRONTEND_URL', default='https://dj-event-mgmt-assignment-2.onrender.com')  # removed / from end
# FRONTEND_URL = "http://localhost:3000"  # common for React/Vite
# FRONTEND_URL = "https://yourapp.com"  # production
# FRONTEND_URL = os.getenv('FRONTEND_URL', 'http://localhost:3000')


AUTH_USER_MODEL = 'auth.User'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/


# new changes for cloudinary

CLOUDINARY_STORAGE = {
    'CLOUD_NAME': config('CLOUDINARY_CLOUD_NAME'),
    'API_KEY':    config('CLOUDINARY_API_KEY'),
    'API_SECRET': config('CLOUDINARY_API_SECRET'),
    # 
    'USE_FILENAME': True,
    'UNIQUE_FILENAME': False,
    'OVERWRITE': True,
}
DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'

# CLOUDINARY_URL=cloudinary://<API_KEY>:<API_SECRET>@<CLOUD_NAME> # use this in .env replacing by values


"""
to use image,
install pillo, 
use ImageField in model, 
in views in post forms initialization include request.FILES, 
in forms.py keep in fields
in form.html in form tag use enctype = 'multipart/form-data',
in settings write MEDIA_URL and MEDIA_ROOT
in urls add them. urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
"""
